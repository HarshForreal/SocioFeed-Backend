// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  username     String  @unique
  email        String  @unique
  password     String
  bio          String?
  avatarUrl    String?
  isActive     Boolean @default(false)
  refreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  likes        Like[]
  posts        Post[]      @relation("UserPosts")
  comments     Comment[]
  savedPosts   SavedPost[]
  followers    Follow[]    @relation("Followee")
  following    Follow[]    @relation("Follower")
  messagesSent Message[]   @relation("MessagesSent")
  messagesRecv Message[]   @relation("MessagesReceived")

  @@map("users")
}

model Post {
  id        String   @id @default(uuid())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  images   PostImage[]
  comments Comment[]
  likes    Like[]
  savedBy  SavedPost[]

  @@map("posts")
}

model PostImage {
  id     String @id @default(uuid())
  url    String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@map("post_images")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@map("comments")
}

model Like {
  id String @id @default(uuid())

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([postId, userId])
  @@map("likes")
}

model SavedPost {
  id String @id @default(uuid())

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())  // ADD THIS LINE

  @@unique([postId, userId])
  @@map("saved_posts")
}


model Follow {
  id String @id @default(uuid())

  follower   User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  followee   User   @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId String

  createdAt DateTime @default(now())

  @@unique([followerId, followeeId])
  @@map("follows")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  sender   User   @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  receiver   User   @relation("MessagesReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@map("messages")
}
